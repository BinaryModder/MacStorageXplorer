
import Foundation

func formatFileSize(_ size: Int64) -> String {
        let byteCountFormatter = ByteCountFormatter()
        byteCountFormatter.allowedUnits = [.useMB, .useGB, .useTB]
        byteCountFormatter.countStyle = .file
        return byteCountFormatter.string(fromByteCount: size)
}

func colorForSize(_ size: Int64) -> String {
    let GB: Int64 = 1024 * 1024 * 1024
    
    if size > 100 * GB {
        return "\u{001B}[31m" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    } else if size > 10 * GB {
        return "\u{001B}[33m" // –ñ–µ–ª—Ç—ã–π
    } else if size > 1 * GB {
        return "\u{001B}[32m" // –ó–µ–ª–µ–Ω—ã–π
    } else {
        return "\u{001B}[36m" // –ì–æ–ª—É–±–æ–π –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    }
}
func checkPermissions() {
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    let testPaths = [
        "/Library/Application Support",
        "/System/Library",
        "/Users/Shared"
    ]
    
    var hasFullAccess = true
    
    for path in testPaths {
        if FileManager.default.isReadableFile(atPath: path){
            continue
        } else {
            hasFullAccess = false
            break
        }
    }
    
    if !hasFullAccess {
        print("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
        print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É.")
        print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å > –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É")
        print("2. –ù–∞–∂–º–∏—Ç–µ '+' –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n")
    } else {
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω")
    }
}

// –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
let resetColor = "\u{001B}[0m"






checkPermissions()

//–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã 
var shouldExit = false

while(!shouldExit)
{
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    print("2. –í—ã—Ö–æ–¥")
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ", terminator: "")
    
    let choice = readLine() ?? ""
    
    switch choice{
    case "1":
            let path: String
            if CommandLine.arguments.count > 1 {
                path = CommandLine.arguments[1]
            } else {
                print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–∞—à–µ–π –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏):", terminator: "")
                let input = readLine() ?? ""
                path = input.isEmpty ? FileManager.default.homeDirectoryForCurrentUser.path : input
            }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
            if !FileManager.default.fileExists(atPath: path) {
                print("–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ \(path)")
                //exit(1)
                continue
            }

            print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \(path)")

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            let scanner = FileScanner()
            let fileInfos = scanner.scanDirectory(atPath: path)

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É):")
            print("-------------------------------------------")
            for fileInfo in fileInfos {
                let sizeString = formatFileSize(fileInfo.size)
                let colorCode = colorForSize(fileInfo.size)
                let icon = fileInfo.isDirectory ? "üìÅ" : "üìÑ"
            
                print("\(icon) \(fileInfo.name.padding(toLength: 40, withPad: " ", startingAt: 0)) \(colorCode)\(sizeString)\(resetColor)")
            }
    case "2":
            shouldExit = true
    default:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")
    }
    
        
    
    

    
}


