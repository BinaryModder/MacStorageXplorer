//
//  main.swift
//  MacStorageXplorer
//
//  Created by Moddeeeeeeep on 05.07.2025.
//

import Foundation

func formatFileSize(_ size: Int64) -> String {
        let byteCountFormatter = ByteCountFormatter()
        byteCountFormatter.allowedUnits = [.useMB, .useGB, .useTB]
        byteCountFormatter.countStyle = .file
        return byteCountFormatter.string(fromByteCount: size)
}

func colorForSize(_ size: Int64) -> String {
    let GB: Int64 = 1024 * 1024 * 1024
    
    if size > 100 * GB {
        return "\u{001B}[31m" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    } else if size > 10 * GB {
        return "\u{001B}[33m" // –ñ–µ–ª—Ç—ã–π
    } else if size > 1 * GB {
        return "\u{001B}[32m" // –ó–µ–ª–µ–Ω—ã–π
    } else {
        return "\u{001B}[36m" // –ì–æ–ª—É–±–æ–π –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    }
}

// –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
let resetColor = "\u{001B}[0m"


var shouldExit = false

while(!shouldExit)
{
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    print("2. –í—ã—Ö–æ–¥")
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ", terminator: "")
    
    let choice = readLine() ?? ""
    
    switch choice{
    case "1":
            let path: String
            if CommandLine.arguments.count > 1 {
                path = CommandLine.arguments[1]
            } else {
                print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏):")
                let input = readLine() ?? ""
                path = input.isEmpty ? "/Users/Documents" : input
            }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
            if !FileManager.default.fileExists(atPath: path) {
                print("–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ \(path)")
                //exit(1)
                continue
            }

            print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \(path)")

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            let scanner = FileScanner()
            let fileInfos = scanner.scanDirectory(atPath: path)

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É):")
            print("-------------------------------------------")
            for fileInfo in fileInfos {
                let sizeString = formatFileSize(fileInfo.size)
                let colorCode = colorForSize(fileInfo.size)
                let icon = fileInfo.isDirectory ? "üìÅ" : "üìÑ"
            
                print("\(icon) \(fileInfo.name.padding(toLength: 40, withPad: " ", startingAt: 0)) \(colorCode)\(sizeString)\(resetColor)")
            }
    case "2":
            shouldExit = true
    default:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")
    }
    
        
    
    

    
}


